<?php
/**
 * AnalysisSummaryItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  ProWritingAidSDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ProWritingAid API V2
 *
 * Official ProWritingAid API Version 2
 *
 * OpenAPI spec version: v2
 * Contact: hello@prowritingaid.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ProWritingAidSDK\Model;

use \ArrayAccess;
use \ProWritingAidSDK\ObjectSerializer;

/**
 * AnalysisSummaryItem Class Doc Comment
 *
 * @category Class
 * @package  ProWritingAidSDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AnalysisSummaryItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AnalysisSummaryItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'text' => 'string',
        'graph' => '\ProWritingAidSDK\Model\AnalysisSummaryGraph',
        'url' => 'string',
        'url_text' => 'string',
        'sub_items' => '\ProWritingAidSDK\Model\AnalysisSummarySubItem[]',
        'is_positive' => 'string',
        'category' => '\ProWritingAidSDK\Model\SuggestionCategory',
        'category_name' => 'string',
        'num_issues' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'text' => null,
        'graph' => null,
        'url' => null,
        'url_text' => null,
        'sub_items' => null,
        'is_positive' => null,
        'category' => null,
        'category_name' => null,
        'num_issues' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'text' => 'Text',
        'graph' => 'Graph',
        'url' => 'Url',
        'url_text' => 'UrlText',
        'sub_items' => 'SubItems',
        'is_positive' => 'IsPositive',
        'category' => 'Category',
        'category_name' => 'CategoryName',
        'num_issues' => 'NumIssues'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'text' => 'setText',
        'graph' => 'setGraph',
        'url' => 'setUrl',
        'url_text' => 'setUrlText',
        'sub_items' => 'setSubItems',
        'is_positive' => 'setIsPositive',
        'category' => 'setCategory',
        'category_name' => 'setCategoryName',
        'num_issues' => 'setNumIssues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'text' => 'getText',
        'graph' => 'getGraph',
        'url' => 'getUrl',
        'url_text' => 'getUrlText',
        'sub_items' => 'getSubItems',
        'is_positive' => 'getIsPositive',
        'category' => 'getCategory',
        'category_name' => 'getCategoryName',
        'num_issues' => 'getNumIssues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const IS_POSITIVE_POSITIVE = 'Positive';
    const IS_POSITIVE_NEGATIVE = 'Negative';
    const IS_POSITIVE_INFORMATION = 'Information';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsPositiveAllowableValues()
    {
        return [
            self::IS_POSITIVE_POSITIVE,
            self::IS_POSITIVE_NEGATIVE,
            self::IS_POSITIVE_INFORMATION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['graph'] = isset($data['graph']) ? $data['graph'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['url_text'] = isset($data['url_text']) ? $data['url_text'] : null;
        $this->container['sub_items'] = isset($data['sub_items']) ? $data['sub_items'] : null;
        $this->container['is_positive'] = isset($data['is_positive']) ? $data['is_positive'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['category_name'] = isset($data['category_name']) ? $data['category_name'] : null;
        $this->container['num_issues'] = isset($data['num_issues']) ? $data['num_issues'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getIsPositiveAllowableValues();
        if (!is_null($this->container['is_positive']) && !in_array($this->container['is_positive'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'is_positive', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text text
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets graph
     *
     * @return \ProWritingAidSDK\Model\AnalysisSummaryGraph
     */
    public function getGraph()
    {
        return $this->container['graph'];
    }

    /**
     * Sets graph
     *
     * @param \ProWritingAidSDK\Model\AnalysisSummaryGraph $graph graph
     *
     * @return $this
     */
    public function setGraph($graph)
    {
        $this->container['graph'] = $graph;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets url_text
     *
     * @return string
     */
    public function getUrlText()
    {
        return $this->container['url_text'];
    }

    /**
     * Sets url_text
     *
     * @param string $url_text url_text
     *
     * @return $this
     */
    public function setUrlText($url_text)
    {
        $this->container['url_text'] = $url_text;

        return $this;
    }

    /**
     * Gets sub_items
     *
     * @return \ProWritingAidSDK\Model\AnalysisSummarySubItem[]
     */
    public function getSubItems()
    {
        return $this->container['sub_items'];
    }

    /**
     * Sets sub_items
     *
     * @param \ProWritingAidSDK\Model\AnalysisSummarySubItem[] $sub_items sub_items
     *
     * @return $this
     */
    public function setSubItems($sub_items)
    {
        $this->container['sub_items'] = $sub_items;

        return $this;
    }

    /**
     * Gets is_positive
     *
     * @return string
     */
    public function getIsPositive()
    {
        return $this->container['is_positive'];
    }

    /**
     * Sets is_positive
     *
     * @param string $is_positive is_positive
     *
     * @return $this
     */
    public function setIsPositive($is_positive)
    {
        $allowedValues = $this->getIsPositiveAllowableValues();
        if (!is_null($is_positive) && !in_array($is_positive, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'is_positive', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['is_positive'] = $is_positive;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \ProWritingAidSDK\Model\SuggestionCategory
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \ProWritingAidSDK\Model\SuggestionCategory $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets category_name
     *
     * @return string
     */
    public function getCategoryName()
    {
        return $this->container['category_name'];
    }

    /**
     * Sets category_name
     *
     * @param string $category_name category_name
     *
     * @return $this
     */
    public function setCategoryName($category_name)
    {
        $this->container['category_name'] = $category_name;

        return $this;
    }

    /**
     * Gets num_issues
     *
     * @return int
     */
    public function getNumIssues()
    {
        return $this->container['num_issues'];
    }

    /**
     * Sets num_issues
     *
     * @param int $num_issues num_issues
     *
     * @return $this
     */
    public function setNumIssues($num_issues)
    {
        $this->container['num_issues'] = $num_issues;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


