<?php
/**
 * WordCloudRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  ProWritingAidSDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ProWritingAid API V2
 *
 * Official ProWritingAid API Version 2
 *
 * OpenAPI spec version: v2
 * Contact: hello@prowritingaid.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ProWritingAidSDK\Model;

use \ArrayAccess;
use \ProWritingAidSDK\ObjectSerializer;

/**
 * WordCloudRequest Class Doc Comment
 *
 * @category Class
 * @package  ProWritingAidSDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WordCloudRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WordCloudRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'text' => 'string',
        'orientation' => 'string',
        'case_method' => 'string',
        'palette_name' => 'string',
        'maximum_word_count' => 'int',
        'remove_common_words' => 'bool',
        'font_name' => 'string',
        'width' => 'int',
        'height' => 'int',
        'only_sentiment_words' => 'bool',
        'style' => 'string',
        'language' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'text' => null,
        'orientation' => null,
        'case_method' => null,
        'palette_name' => null,
        'maximum_word_count' => 'int32',
        'remove_common_words' => null,
        'font_name' => null,
        'width' => 'int32',
        'height' => 'int32',
        'only_sentiment_words' => null,
        'style' => null,
        'language' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'text' => 'Text',
        'orientation' => 'Orientation',
        'case_method' => 'CaseMethod',
        'palette_name' => 'PaletteName',
        'maximum_word_count' => 'MaximumWordCount',
        'remove_common_words' => 'RemoveCommonWords',
        'font_name' => 'FontName',
        'width' => 'Width',
        'height' => 'Height',
        'only_sentiment_words' => 'OnlySentimentWords',
        'style' => 'Style',
        'language' => 'Language'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'text' => 'setText',
        'orientation' => 'setOrientation',
        'case_method' => 'setCaseMethod',
        'palette_name' => 'setPaletteName',
        'maximum_word_count' => 'setMaximumWordCount',
        'remove_common_words' => 'setRemoveCommonWords',
        'font_name' => 'setFontName',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'only_sentiment_words' => 'setOnlySentimentWords',
        'style' => 'setStyle',
        'language' => 'setLanguage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'text' => 'getText',
        'orientation' => 'getOrientation',
        'case_method' => 'getCaseMethod',
        'palette_name' => 'getPaletteName',
        'maximum_word_count' => 'getMaximumWordCount',
        'remove_common_words' => 'getRemoveCommonWords',
        'font_name' => 'getFontName',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'only_sentiment_words' => 'getOnlySentimentWords',
        'style' => 'getStyle',
        'language' => 'getLanguage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ORIENTATION_HORIZONTAL = 'Horizontal';
    const ORIENTATION_MOSTLY_HORIZONTAL = 'MostlyHorizontal';
    const ORIENTATION_VERTICAL = 'Vertical';
    const ORIENTATION_MOSTLY_VERTICAL = 'MostlyVertical';
    const ORIENTATION_HALF_AND_HALF = 'HalfAndHalf';
    const ORIENTATION_EVERY_WHICH_WAY = 'EveryWhichWay';
    const CASE_METHOD_PRESERVE_CASE = 'PreserveCase';
    const CASE_METHOD_LOWERCASE = 'Lowercase';
    const CASE_METHOD_UPPERCASE = 'Uppercase';
    const CASE_METHOD_INTELLIGENT_CASE = 'IntelligentCase';
    const STYLE_NOT_SET = 'NotSet';
    const STYLE_GENERAL = 'General';
    const STYLE_ACADEMIC = 'Academic';
    const STYLE_BUSINESS = 'Business';
    const STYLE_TECHNICAL = 'Technical';
    const STYLE_CREATIVE = 'Creative';
    const STYLE_CASUAL = 'Casual';
    const STYLE_WEB = 'Web';
    const LANGUAGE_EN_US = 'en_US';
    const LANGUAGE_EN_UK = 'en_UK';
    const LANGUAGE_EN_AU = 'en_AU';
    const LANGUAGE_EN_CA = 'en_CA';
    const LANGUAGE_EN = 'en';
    const LANGUAGE_ES = 'es';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrientationAllowableValues()
    {
        return [
            self::ORIENTATION_HORIZONTAL,
            self::ORIENTATION_MOSTLY_HORIZONTAL,
            self::ORIENTATION_VERTICAL,
            self::ORIENTATION_MOSTLY_VERTICAL,
            self::ORIENTATION_HALF_AND_HALF,
            self::ORIENTATION_EVERY_WHICH_WAY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCaseMethodAllowableValues()
    {
        return [
            self::CASE_METHOD_PRESERVE_CASE,
            self::CASE_METHOD_LOWERCASE,
            self::CASE_METHOD_UPPERCASE,
            self::CASE_METHOD_INTELLIGENT_CASE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStyleAllowableValues()
    {
        return [
            self::STYLE_NOT_SET,
            self::STYLE_GENERAL,
            self::STYLE_ACADEMIC,
            self::STYLE_BUSINESS,
            self::STYLE_TECHNICAL,
            self::STYLE_CREATIVE,
            self::STYLE_CASUAL,
            self::STYLE_WEB,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLanguageAllowableValues()
    {
        return [
            self::LANGUAGE_EN_US,
            self::LANGUAGE_EN_UK,
            self::LANGUAGE_EN_AU,
            self::LANGUAGE_EN_CA,
            self::LANGUAGE_EN,
            self::LANGUAGE_ES,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['orientation'] = isset($data['orientation']) ? $data['orientation'] : 'EveryWhichWay';
        $this->container['case_method'] = isset($data['case_method']) ? $data['case_method'] : 'IntelligentCase';
        $this->container['palette_name'] = isset($data['palette_name']) ? $data['palette_name'] : 'ProWritingAid';
        $this->container['maximum_word_count'] = isset($data['maximum_word_count']) ? $data['maximum_word_count'] : 100;
        $this->container['remove_common_words'] = isset($data['remove_common_words']) ? $data['remove_common_words'] : true;
        $this->container['font_name'] = isset($data['font_name']) ? $data['font_name'] : 'Arial';
        $this->container['width'] = isset($data['width']) ? $data['width'] : 200;
        $this->container['height'] = isset($data['height']) ? $data['height'] : 200;
        $this->container['only_sentiment_words'] = isset($data['only_sentiment_words']) ? $data['only_sentiment_words'] : false;
        $this->container['style'] = isset($data['style']) ? $data['style'] : 'General';
        $this->container['language'] = isset($data['language']) ? $data['language'] : 'en';
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        if ($this->container['orientation'] === null) {
            $invalidProperties[] = "'orientation' can't be null";
        }
        $allowedValues = $this->getOrientationAllowableValues();
        if (!is_null($this->container['orientation']) && !in_array($this->container['orientation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'orientation', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['case_method'] === null) {
            $invalidProperties[] = "'case_method' can't be null";
        }
        $allowedValues = $this->getCaseMethodAllowableValues();
        if (!is_null($this->container['case_method']) && !in_array($this->container['case_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'case_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['palette_name'] === null) {
            $invalidProperties[] = "'palette_name' can't be null";
        }
        if ($this->container['maximum_word_count'] === null) {
            $invalidProperties[] = "'maximum_word_count' can't be null";
        }
        if ($this->container['remove_common_words'] === null) {
            $invalidProperties[] = "'remove_common_words' can't be null";
        }
        if ($this->container['font_name'] === null) {
            $invalidProperties[] = "'font_name' can't be null";
        }
        if ($this->container['width'] === null) {
            $invalidProperties[] = "'width' can't be null";
        }
        if ($this->container['height'] === null) {
            $invalidProperties[] = "'height' can't be null";
        }
        if ($this->container['only_sentiment_words'] === null) {
            $invalidProperties[] = "'only_sentiment_words' can't be null";
        }
        if ($this->container['style'] === null) {
            $invalidProperties[] = "'style' can't be null";
        }
        $allowedValues = $this->getStyleAllowableValues();
        if (!is_null($this->container['style']) && !in_array($this->container['style'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'style', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['language'] === null) {
            $invalidProperties[] = "'language' can't be null";
        }
        $allowedValues = $this->getLanguageAllowableValues();
        if (!is_null($this->container['language']) && !in_array($this->container['language'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'language', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text The text to be turned into a Word Cloud
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets orientation
     *
     * @return string
     */
    public function getOrientation()
    {
        return $this->container['orientation'];
    }

    /**
     * Sets orientation
     *
     * @param string $orientation The orientation of the text
     *
     * @return $this
     */
    public function setOrientation($orientation)
    {
        $allowedValues = $this->getOrientationAllowableValues();
        if (!in_array($orientation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'orientation', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['orientation'] = $orientation;

        return $this;
    }

    /**
     * Gets case_method
     *
     * @return string
     */
    public function getCaseMethod()
    {
        return $this->container['case_method'];
    }

    /**
     * Sets case_method
     *
     * @param string $case_method The method to be used for casing
     *
     * @return $this
     */
    public function setCaseMethod($case_method)
    {
        $allowedValues = $this->getCaseMethodAllowableValues();
        if (!in_array($case_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'case_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['case_method'] = $case_method;

        return $this;
    }

    /**
     * Gets palette_name
     *
     * @return string
     */
    public function getPaletteName()
    {
        return $this->container['palette_name'];
    }

    /**
     * Sets palette_name
     *
     * @param string $palette_name The name of the palette
     *
     * @return $this
     */
    public function setPaletteName($palette_name)
    {
        $this->container['palette_name'] = $palette_name;

        return $this;
    }

    /**
     * Gets maximum_word_count
     *
     * @return int
     */
    public function getMaximumWordCount()
    {
        return $this->container['maximum_word_count'];
    }

    /**
     * Sets maximum_word_count
     *
     * @param int $maximum_word_count the maximum number of words to be created
     *
     * @return $this
     */
    public function setMaximumWordCount($maximum_word_count)
    {
        $this->container['maximum_word_count'] = $maximum_word_count;

        return $this;
    }

    /**
     * Gets remove_common_words
     *
     * @return bool
     */
    public function getRemoveCommonWords()
    {
        return $this->container['remove_common_words'];
    }

    /**
     * Sets remove_common_words
     *
     * @param bool $remove_common_words Should Common words be removed from the cloud
     *
     * @return $this
     */
    public function setRemoveCommonWords($remove_common_words)
    {
        $this->container['remove_common_words'] = $remove_common_words;

        return $this;
    }

    /**
     * Gets font_name
     *
     * @return string
     */
    public function getFontName()
    {
        return $this->container['font_name'];
    }

    /**
     * Sets font_name
     *
     * @param string $font_name The name of the font to use
     *
     * @return $this
     */
    public function setFontName($font_name)
    {
        $this->container['font_name'] = $font_name;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int $width The width of the image to produce
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int $height The height of the image to produce
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets only_sentiment_words
     *
     * @return bool
     */
    public function getOnlySentimentWords()
    {
        return $this->container['only_sentiment_words'];
    }

    /**
     * Sets only_sentiment_words
     *
     * @param bool $only_sentiment_words Only use the sentiment words from the text
     *
     * @return $this
     */
    public function setOnlySentimentWords($only_sentiment_words)
    {
        $this->container['only_sentiment_words'] = $only_sentiment_words;

        return $this;
    }

    /**
     * Gets style
     *
     * @return string
     */
    public function getStyle()
    {
        return $this->container['style'];
    }

    /**
     * Sets style
     *
     * @param string $style Document's writing style
     *
     * @return $this
     */
    public function setStyle($style)
    {
        $allowedValues = $this->getStyleAllowableValues();
        if (!in_array($style, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'style', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['style'] = $style;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language Document's language. Set correct UK/US language to get region-specific suggestions
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $allowedValues = $this->getLanguageAllowableValues();
        if (!in_array($language, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'language', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['language'] = $language;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


